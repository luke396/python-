# format()格式化字符串 顺序对应 区别于直接用%代替 .format()_
>>>print('{} is {:.2f}'.format(1.123,1.123))  # 取2位小数 关于{:.nf}(n为整数)
1.123 is 1.12

# if else elif 语句 记得写： 事实上，貌似这种语句都需要:
# if  xxxx：    else:
  还有，这样的语句之后，下一行想要执行的语句记得打上缩进。
  
#关于循环语句，尤其是while，别在交互式窗口乱用，要不容易一直循环，还好可以直接退出窗口结束，这要输退不出去，电脑会不会跑的累死呢？
   有些时候，如果代码写得有问题，会让程序陷入“死循环”，也就是永远循环下去。这时可以用Ctrl+C退出程序，或者强制结束Python进程。 （来自教程的问候和解决方案） 我才不会说，我已经写死了好几遍了。
      
#关于调用函数 http://docs.python.org/3/library/functions.html  官方的网站或者谷歌，等着你去查询呢，其实也并不需要篇都背下来，反正我也背不下来。
 还有，英文很重要啊，错了之后人家告诉你，你都不认识，多尴尬啊。
 
#关于pass pass用来占位，要不然你没想好这一块怎么写，整个代码都运行不下去，缺少pass，会检查出语法错误。
 
#记得先引入math（import math），再去引用math包里的函数。math.pi/6表示弧度，转换成角度为30度。（居然猜对了，妙啊） 
 
#定义函数
 在这一部分，我也没想到拦住我的居然是这些个括号。 x1 = (-b+math.sqrt(b**2-4*a*c))/(2*a)
 math.sqrt()是一部分 ( -b+math.sqrt() )是一部分 
 x1 = ( -b + math.sqrt(b**2-4*a*c) )/ (2*a) 你这么写，他不就清晰多了，而且还不影响计算。
 原来老师在这部分设置测试的最主要目的就是检验括号有没有错误，妙啊。
 也就在这 忽然间理解了为啥代码写的清楚很重要，要不，你真的不知道从哪里找问题啊。
 
 #
  def power(x, n):
    s = 1
    while n > 0:
        n = n - 1
        s = s * x
    return s
   基本的数学方法和思想真的很重要。 引入另一个变量n，通过n的递减，来进行x的无限次幂运算。
   
  #关于调用参数 
   为了简化调用的难度，我们可以在写函数的时候，写入默认参数，给位置靠后，变化较小的变量（简化使用难度）。
   其实就相当于给那个参数一个初始值，如果没有新的值来冲淡他，那就输出写入函数时的默认值，如果新写入一个参数，那就按照新的参数来计算。
   
   def add_end(L=[]):
    L.append('END')
    return L   
   这个函数中 add_end 函数，指向的是变量L,所以如果反复调用，会出现很多个 END
   (>>> add_end()
    ['END', 'END']
    >>> add_end()
    ['END', 'END', 'END'])     #写入的时候，默认参数必须指向不变对象。（设计str、None这样的不变对象）
                                这个() list 就是个可变的量。 每次调用add_end函数的时候，都改变了这个量，再次调用就在改变一次的基础上改变了第二次。
                                尽管这样也可以达到某些目的，但是好像并不我们写add_end函数的初衷，这样的每一次都可以改变的函数，也不能一直调用啊。
   
   要解决这个问题，只需要把add_end 函数的对象改成个不变的量就好了
   def add_end(L=None):
    if L is None:
        L = []      #如果L是个空的，则在L中添加“END”，其中None则是个不变的量。
    L.append('END')
    return L
